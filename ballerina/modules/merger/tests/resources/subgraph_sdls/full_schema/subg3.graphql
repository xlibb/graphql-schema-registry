extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable"]) 

type Query {
  "Returns a list of reviews"
  reviews: [Review!]!
}

type Review {
  "The ID of the review"
  id: ID!
  "The title of the review"
  title: String!
  "The review comment"
  comment: String!
  "The rating of the review (0 to 5)"
  rating: Int!
  "The author of the review"
  author: User!
  "The product that the review is for"
  product: Product!
}

type User @key(fields: "id") {
  id: ID!
  reviews: [Review!]!
}

type Product @key(fields: "id") {
  id: ID!
  reviews: [Review!]!
}

type Mutation {
  "Adds a new review"
  addReview(
    "The review to be added."
    input: ReviewInput!
  ): Review!
}

"The input type for the addReview mutation"
input ReviewInput {
  "The title of the review"
  title: String!
  "The comment of the review"
  comment: String!
  "The rating of the review. This is an integer between 0 and 5"
  rating: Int!
  "The ID of the review author"
  authorId: String!
  "The product ID that the review is for"
  productId: String!
}

union UnionFoo = UnionQux | UnionBar

type UnionQux {
    name: String
}

type UnionBar {
    name(id: ID!): String @shareable
}

input InputFoo {
    diff_non_nullable_type_1: ID
    diff_non_nullable_type_2: ID!
    diff_outer_non_nullable_type: [ID]
}

type OutputFoo {
    diff_non_nullable_type_1: ID @shareable
    diff_non_nullable_type_2: ID! @shareable
    diff_outer_non_nullable_type: [ID] @shareable
    diff_inner_non_nullable_type: [ID] @shareable
    diff_outer_inner_non_nullable_type: [ID] @shareable
}

enum EnumWaldo {
    QUZ
    NIX
}

enum EnumBar {
    BUX
    BAX
}

enum EnumThud {
    FRED
    RICK
}

enum EnumFoo {
    BAR
    BIL
}
