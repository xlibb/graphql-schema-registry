schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Bar
  @join__type(graph: SUBG1)
  @join__type(graph: SUBG3)
{
  name: String
}

type Bux
  @join__type(graph: SUBG1)
{
  name: String
}

union Foo
  @join__type(graph: SUBG1)
  @join__type(graph: SUBG2)
  @join__type(graph: SUBG3)
  @join__unionMember(graph: SUBG1, member: "Bar")
  @join__unionMember(graph: SUBG3, member: "Bar")
  @join__unionMember(graph: SUBG1, member: "Bux")
  @join__unionMember(graph: SUBG2, member: "Waldo")
  @join__unionMember(graph: SUBG3, member: "Qux")
 = Bar | Bux | Waldo | Qux

scalar join__FieldSet

enum join__Graph {
  SUBG1 @join__graph(name: "subg1", url: "http://subg1")
  SUBG2 @join__graph(name: "subg2", url: "http://subg2")
  SUBG3 @join__graph(name: "subg3", url: "http://subg3")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SUBG1)
  @join__type(graph: SUBG2)
  @join__type(graph: SUBG3)
{
  name: String
}

type Qux
  @join__type(graph: SUBG3)
{
  name: String
}

type Waldo
  @join__type(graph: SUBG2)
{
  name: String
}
