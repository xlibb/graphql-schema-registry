{
    "data": {
        "publishSubgraph": {
            "schema": "schema\n  @link(url: \"https://specs.apollo.dev/link/v1.0\")\n  @link(url: \"https://specs.apollo.dev/join/v0.3\", for: EXECUTION)\n{\n  query: Query\n  mutation: Mutation\n}\n\ndirective @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE\n\ndirective @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION\n\ndirective @join__graph(name: String!, url: String!) on ENUM_VALUE\n\ndirective @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE\n\ndirective @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR\n\ndirective @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION\n\ndirective @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA\n\n\"\"\"## Payments\"\"\"\ntype AddFundsToWalletResponse implements MutationResponse\n  @join__implements(graph: MONOLITH, interface: \"MutationResponse\")\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"Updated wallet amount\"\"\"\n  amount: Float\n}\n\n\"\"\"\nWhat the location provides. An amenity should be tied to a specific category.\n\"\"\"\ntype Amenity\n  @join__type(graph: MONOLITH)\n{\n  id: ID!\n\n  \"\"\"The category for the amenity\"\"\"\n  category: AmenityCategory!\n\n  \"\"\"The name of the amenity. Should be short.\"\"\"\n  name: String!\n}\n\n\"\"\"The category an amenity belongs to.\"\"\"\nenum AmenityCategory\n  @join__type(graph: MONOLITH)\n{\n  ACCOMMODATION_DETAILS @join__enumValue(graph: MONOLITH)\n  SPACE_SURVIVAL @join__enumValue(graph: MONOLITH)\n  OUTDOORS @join__enumValue(graph: MONOLITH)\n}\n\n\"\"\"A booking is a reservation for a specific listing\"\"\"\ntype Booking\n  @join__type(graph: MONOLITH)\n{\n  id: ID!\n\n  \"\"\"The listing associated with the reservation\"\"\"\n  listing: Listing!\n\n  \"\"\"The guest that reserved the location\"\"\"\n  guest: Guest!\n\n  \"\"\"Check-in date for the reservation\"\"\"\n  checkInDate: String!\n\n  \"\"\"Check-out date for the reservation\"\"\"\n  checkOutDate: String!\n\n  \"\"\"\n  Total price paid, calculated using the listing's costPerNight and the check-in check-out dates\n  \"\"\"\n  totalPrice: Float!\n\n  \"\"\"\n  The status of the booking - check BookingStatus type for all possibilities\n  \"\"\"\n  status: BookingStatus!\n\n  \"\"\"The guest's review of the location\"\"\"\n  locationReview: Review\n\n  \"\"\"The guest's review about the host\"\"\"\n  hostReview: Review\n\n  \"\"\"The host's review about the guest\"\"\"\n  guestReview: Review\n}\n\n\"\"\"The status of a booking\"\"\"\nenum BookingStatus\n  @join__type(graph: MONOLITH)\n{\n  CURRENT @join__enumValue(graph: MONOLITH)\n  COMPLETED @join__enumValue(graph: MONOLITH)\n  UPCOMING @join__enumValue(graph: MONOLITH)\n}\n\n\"\"\"Fields for creating a booking\"\"\"\ninput CreateBookingInput\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"ID of the listing associated with the booking\"\"\"\n  listingId: ID!\n\n  \"\"\"Date of check-in\"\"\"\n  checkInDate: ID!\n\n  \"\"\"Date of check-out\"\"\"\n  checkOutDate: ID!\n}\n\n\"\"\"The response after creating a booking.\"\"\"\ntype CreateBookingResponse implements MutationResponse\n  @join__implements(graph: MONOLITH, interface: \"MutationResponse\")\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"The newly-created booking\"\"\"\n  booking: NewBookingResponse\n}\n\n\"\"\"Used to create a listing\"\"\"\ninput CreateListingInput\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"The listing's title\"\"\"\n  title: String!\n\n  \"\"\"The listing's description\"\"\"\n  description: String!\n\n  \"\"\"The thumbnail image for the listing\"\"\"\n  photoThumbnail: String!\n\n  \"\"\"The number of beds available\"\"\"\n  numOfBeds: Int!\n\n  \"\"\"The cost per night\"\"\"\n  costPerNight: Float!\n\n  \"\"\"The location type of the listing\"\"\"\n  locationType: LocationType!\n\n  \"\"\"The Listing's amenities \"\"\"\n  amenities: [ID!]!\n}\n\n\"\"\"Response after creating a listing\"\"\"\ntype CreateListingResponse implements MutationResponse\n  @join__implements(graph: MONOLITH, interface: \"MutationResponse\")\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"The newly created listing\"\"\"\n  listing: Listing\n}\n\n\"\"\"A guest is a type of Airlock user. They book places to stay.\"\"\"\ntype Guest implements User\n  @join__implements(graph: ACCOUNTS, interface: \"User\")\n  @join__implements(graph: MONOLITH, interface: \"User\")\n  @join__type(graph: ACCOUNTS, key: \"id\")\n  @join__type(graph: MONOLITH, key: \"id\")\n{\n  id: ID!\n\n  \"\"\"The user's first and last name\"\"\"\n  name: String! @join__field(graph: ACCOUNTS)\n\n  \"\"\"The user's profile photo URL\"\"\"\n  profilePicture: String! @join__field(graph: ACCOUNTS)\n\n  \"\"\"Amount of money in the guest's wallet\"\"\"\n  funds: Float! @join__field(graph: MONOLITH)\n}\n\n\"\"\"A host is a type of Airlock user. They own listings.\"\"\"\ntype Host implements User\n  @join__implements(graph: ACCOUNTS, interface: \"User\")\n  @join__implements(graph: MONOLITH, interface: \"User\")\n  @join__type(graph: ACCOUNTS, key: \"id\")\n  @join__type(graph: MONOLITH, key: \"id\")\n{\n  id: ID!\n\n  \"\"\"The user's first and last name\"\"\"\n  name: String! @join__field(graph: ACCOUNTS)\n\n  \"\"\"The user's profile photo URL\"\"\"\n  profilePicture: String! @join__field(graph: ACCOUNTS)\n\n  \"\"\"The host's profile bio description, will be shown in the listing\"\"\"\n  profileDescription: String! @join__field(graph: ACCOUNTS)\n\n  \"\"\"The overall calculated rating for the host\"\"\"\n  overallRating: Float @join__field(graph: MONOLITH)\n}\n\nscalar join__FieldSet\n\nenum join__Graph {\n  ACCOUNTS @join__graph(name: \"accounts\", url: \"http://localhost:4000\")\n  MONOLITH @join__graph(name: \"monolith\", url: \"http://localhost:4001\")\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"\"\"\n  `SECURITY` features provide metadata necessary to securely resolve fields.\n  \"\"\"\n  SECURITY\n\n  \"\"\"\n  `EXECUTION` features provide metadata necessary for operation execution.\n  \"\"\"\n  EXECUTION\n}\n\n\"\"\"\nA listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value.\n\"\"\"\ntype Listing\n  @join__type(graph: MONOLITH)\n{\n  id: ID!\n\n  \"\"\"The listing's title\"\"\"\n  title: String!\n\n  \"\"\"The listing's description\"\"\"\n  description: String!\n\n  \"\"\"The thumbnail image for the listing\"\"\"\n  photoThumbnail: String!\n\n  \"\"\"The number of beds available\"\"\"\n  numOfBeds: Int!\n\n  \"\"\"The cost per night\"\"\"\n  costPerNight: Float!\n\n  \"\"\"The location type of the listing\"\"\"\n  locationType: LocationType!\n\n  \"\"\"Owner of the listing\"\"\"\n  host: Host!\n\n  \"\"\"The amenities available for this listing\"\"\"\n  amenities: [Amenity]!\n\n  \"\"\"The list of bookings for a listing\"\"\"\n  bookings: [Booking]!\n\n  \"\"\"The number of current and upcoming bookings for a listing\"\"\"\n  numberOfUpcomingBookings: Int!\n\n  \"\"\"\n  An array of upcoming reserved dates that the listing has been booked for\n  \"\"\"\n  currentlyBookedDates: [ReservedDate]!\n\n  \"\"\"The submitted reviews for this listing\"\"\"\n  reviews: [Review]!\n\n  \"\"\"The overall calculated rating for a listing\"\"\"\n  overallRating: Float\n\n  \"\"\"Calculated total cost of the listing with the given arguments\"\"\"\n  totalCost(checkInDate: String!, checkOutDate: String!): Float!\n}\n\n\"\"\"A listing can be one of these types.\"\"\"\nenum LocationType\n  @join__type(graph: MONOLITH)\n{\n  SPACESHIP @join__enumValue(graph: MONOLITH)\n  HOUSE @join__enumValue(graph: MONOLITH)\n  CAMPSITE @join__enumValue(graph: MONOLITH)\n  APARTMENT @join__enumValue(graph: MONOLITH)\n  ROOM @join__enumValue(graph: MONOLITH)\n}\n\ntype Mutation\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Creates a new listing for the currently authenticated host\"\"\"\n  createListing(listing: CreateListingInput!): CreateListingResponse!\n\n  \"\"\"Updates an existing listing\"\"\"\n  updateListing(listingId: ID!, listing: UpdateListingInput!): UpdateListingResponse!\n\n  \"\"\"## Bookings\"\"\"\n  createBooking(createBookingInput: CreateBookingInput): CreateBookingResponse!\n\n  \"\"\"\n  Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking\n  \"\"\"\n  submitHostAndLocationReviews(bookingId: ID!, hostReview: ReviewInput!, locationReview: ReviewInput!): SubmitHostAndLocationReviewsResponse!\n\n  \"\"\"\n  Creates a review for the guest - must be authored by host of past booking\n  \"\"\"\n  submitGuestReview(bookingId: ID!, guestReview: ReviewInput!): SubmitGuestReviewResponse!\n\n  \"\"\"## Wallet\"\"\"\n  addFundsToWallet(amount: Float!): AddFundsToWalletResponse!\n}\n\ninterface MutationResponse\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n}\n\n\"\"\"Minimum details needed for a newly created booking\"\"\"\ntype NewBookingResponse\n  @join__type(graph: MONOLITH)\n{\n  id: ID!\n  checkInDate: String!\n  checkOutDate: String!\n}\n\ntype Query\n  @join__type(graph: ACCOUNTS)\n  @join__type(graph: MONOLITH)\n{\n  example: String @join__field(graph: ACCOUNTS)\n\n  \"\"\"A curated array of listings to feature on the homepage\"\"\"\n  featuredListings: [Listing!]! @join__field(graph: MONOLITH)\n\n  \"\"\"Search results for listings that fit the criteria provided\"\"\"\n  searchListings(criteria: SearchListingsInput): [Listing]! @join__field(graph: MONOLITH)\n\n  \"\"\"Return the listings that belong to the currently logged-in host\"\"\"\n  hostListings: [Listing]! @join__field(graph: MONOLITH)\n\n  \"\"\"Returns the details about this listing\"\"\"\n  listing(id: ID!): Listing @join__field(graph: MONOLITH)\n\n  \"\"\"Returns all possible amenities for a listing\"\"\"\n  listingAmenities: [Amenity!]! @join__field(graph: MONOLITH)\n\n  \"\"\"\n  All bookings for the given listing, optionally filtered by a BookingStatus\n  \"\"\"\n  bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]! @join__field(graph: MONOLITH)\n\n  \"\"\"A list of bookings for the guest - must be authenticated as guest\"\"\"\n  guestBookings: [Booking]! @join__field(graph: MONOLITH)\n\n  \"\"\"Past bookings for guest based on current date\"\"\"\n  pastGuestBookings: [Booking]! @join__field(graph: MONOLITH)\n\n  \"\"\"Upcoming and current bookings for guest based on current date\"\"\"\n  upcomingGuestBookings: [Booking]! @join__field(graph: MONOLITH)\n\n  \"\"\"Current booking for guest based on current date\"\"\"\n  currentGuestBooking: Booking @join__field(graph: MONOLITH)\n}\n\n\"\"\"\nA booking is reserved for a certain date range, marked by the checkInDate and checkOutDate fields\n\"\"\"\ntype ReservedDate\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Date the guest checks in\"\"\"\n  checkInDate: String!\n\n  \"\"\"Date the guest checks out\"\"\"\n  checkOutDate: String!\n}\n\n\"\"\"\nA review consists of a numerical rating and written text. It can be written by a host or a guest.\n\"\"\"\ntype Review\n  @join__type(graph: MONOLITH)\n{\n  id: ID!\n\n  \"\"\"Written comment the author has written about the review target\"\"\"\n  text: String!\n\n  \"\"\"User that wrote the review\"\"\"\n  author: User!\n\n  \"\"\"\n  The numerical rating for the review target, on a scale of 1-5, with 5 being excellent.\n  \"\"\"\n  rating: Float!\n}\n\n\"\"\"\nReviewInput is the bare minimum needed to submit a review, not tied to any target.\n\"\"\"\ninput ReviewInput\n  @join__type(graph: MONOLITH)\n{\n  text: String!\n  rating: Float!\n}\n\n\"\"\"To search for a listing, you need these fields.\"\"\"\ninput SearchListingsInput\n  @join__type(graph: MONOLITH)\n{\n  checkInDate: String!\n  checkOutDate: String!\n  numOfBeds: Int\n\n  \"\"\"The page in the search results, defaults to 1\"\"\"\n  page: Int\n\n  \"\"\"The number of listings you can display in a page, defaults to 5\"\"\"\n  limit: Int\n\n  \"\"\"The results sort order, defaults to cost descending\"\"\"\n  sortBy: SortByCriteria\n}\n\n\"\"\"Listings can be sorted by these options\"\"\"\nenum SortByCriteria\n  @join__type(graph: MONOLITH)\n{\n  COST_ASC @join__enumValue(graph: MONOLITH)\n  COST_DESC @join__enumValue(graph: MONOLITH)\n}\n\n\"\"\"The response after submitting reviews for a guest.\"\"\"\ntype SubmitGuestReviewResponse implements MutationResponse\n  @join__implements(graph: MONOLITH, interface: \"MutationResponse\")\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"Newly created review about the guest\"\"\"\n  guestReview: Review\n}\n\n\"\"\"\nThe response after submitting reviews for both host and location together.\n\"\"\"\ntype SubmitHostAndLocationReviewsResponse implements MutationResponse\n  @join__implements(graph: MONOLITH, interface: \"MutationResponse\")\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"Newly created review about the host\"\"\"\n  hostReview: Review\n\n  \"\"\"Newly created review about the location\"\"\"\n  locationReview: Review\n}\n\n\"\"\"\nUpdates the properties included. If none are given, don't update anything\n\"\"\"\ninput UpdateListingInput\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"The listing's title\"\"\"\n  title: String\n\n  \"\"\"The listing's description\"\"\"\n  description: String\n\n  \"\"\"The thumbnail image for the listing\"\"\"\n  photoThumbnail: String\n\n  \"\"\"The number of beds available\"\"\"\n  numOfBeds: Int\n\n  \"\"\"The cost per night\"\"\"\n  costPerNight: Float\n\n  \"\"\"The location type of the listing\"\"\"\n  locationType: LocationType\n\n  \"\"\"The Listing's amenities \"\"\"\n  amenities: [ID]\n}\n\n\"\"\"Response after updating a listing\"\"\"\ntype UpdateListingResponse implements MutationResponse\n  @join__implements(graph: MONOLITH, interface: \"MutationResponse\")\n  @join__type(graph: MONOLITH)\n{\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"The newly updated listing\"\"\"\n  listing: Listing\n}\n\n\"\"\"Represents an Airlock user's common properties\"\"\"\ninterface User\n  @join__type(graph: ACCOUNTS)\n  @join__type(graph: MONOLITH)\n{\n  id: ID!\n\n  \"\"\"The user's first and last name\"\"\"\n  name: String! @join__field(graph: ACCOUNTS)\n\n  \"\"\"The user's profile photo URL\"\"\"\n  profilePicture: String! @join__field(graph: ACCOUNTS)\n}",
            "version": "2.0.0",
            "apiSchema": "\"\"\"## Payments\"\"\"\ntype AddFundsToWalletResponse implements MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"Updated wallet amount\"\"\"\n  amount: Float\n}\n\n\"\"\"\nWhat the location provides. An amenity should be tied to a specific category.\n\"\"\"\ntype Amenity {\n  id: ID!\n\n  \"\"\"The category for the amenity\"\"\"\n  category: AmenityCategory!\n\n  \"\"\"The name of the amenity. Should be short.\"\"\"\n  name: String!\n}\n\n\"\"\"The category an amenity belongs to.\"\"\"\nenum AmenityCategory {\n  ACCOMMODATION_DETAILS\n  SPACE_SURVIVAL\n  OUTDOORS\n}\n\n\"\"\"A booking is a reservation for a specific listing\"\"\"\ntype Booking {\n  id: ID!\n\n  \"\"\"The listing associated with the reservation\"\"\"\n  listing: Listing!\n\n  \"\"\"The guest that reserved the location\"\"\"\n  guest: Guest!\n\n  \"\"\"Check-in date for the reservation\"\"\"\n  checkInDate: String!\n\n  \"\"\"Check-out date for the reservation\"\"\"\n  checkOutDate: String!\n\n  \"\"\"\n  Total price paid, calculated using the listing's costPerNight and the check-in check-out dates\n  \"\"\"\n  totalPrice: Float!\n\n  \"\"\"\n  The status of the booking - check BookingStatus type for all possibilities\n  \"\"\"\n  status: BookingStatus!\n\n  \"\"\"The guest's review of the location\"\"\"\n  locationReview: Review\n\n  \"\"\"The guest's review about the host\"\"\"\n  hostReview: Review\n\n  \"\"\"The host's review about the guest\"\"\"\n  guestReview: Review\n}\n\n\"\"\"The status of a booking\"\"\"\nenum BookingStatus {\n  CURRENT\n  COMPLETED\n  UPCOMING\n}\n\n\"\"\"Fields for creating a booking\"\"\"\ninput CreateBookingInput {\n  \"\"\"ID of the listing associated with the booking\"\"\"\n  listingId: ID!\n\n  \"\"\"Date of check-in\"\"\"\n  checkInDate: ID!\n\n  \"\"\"Date of check-out\"\"\"\n  checkOutDate: ID!\n}\n\n\"\"\"The response after creating a booking.\"\"\"\ntype CreateBookingResponse implements MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"The newly-created booking\"\"\"\n  booking: NewBookingResponse\n}\n\n\"\"\"Used to create a listing\"\"\"\ninput CreateListingInput {\n  \"\"\"The listing's title\"\"\"\n  title: String!\n\n  \"\"\"The listing's description\"\"\"\n  description: String!\n\n  \"\"\"The thumbnail image for the listing\"\"\"\n  photoThumbnail: String!\n\n  \"\"\"The number of beds available\"\"\"\n  numOfBeds: Int!\n\n  \"\"\"The cost per night\"\"\"\n  costPerNight: Float!\n\n  \"\"\"The location type of the listing\"\"\"\n  locationType: LocationType!\n\n  \"\"\"The Listing's amenities \"\"\"\n  amenities: [ID!]!\n}\n\n\"\"\"Response after creating a listing\"\"\"\ntype CreateListingResponse implements MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"The newly created listing\"\"\"\n  listing: Listing\n}\n\n\"\"\"A guest is a type of Airlock user. They book places to stay.\"\"\"\ntype Guest implements User {\n  id: ID!\n\n  \"\"\"The user's first and last name\"\"\"\n  name: String!\n\n  \"\"\"The user's profile photo URL\"\"\"\n  profilePicture: String!\n\n  \"\"\"Amount of money in the guest's wallet\"\"\"\n  funds: Float!\n}\n\n\"\"\"A host is a type of Airlock user. They own listings.\"\"\"\ntype Host implements User {\n  id: ID!\n\n  \"\"\"The user's first and last name\"\"\"\n  name: String!\n\n  \"\"\"The user's profile photo URL\"\"\"\n  profilePicture: String!\n\n  \"\"\"The host's profile bio description, will be shown in the listing\"\"\"\n  profileDescription: String!\n\n  \"\"\"The overall calculated rating for the host\"\"\"\n  overallRating: Float\n}\n\n\"\"\"\nA listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value.\n\"\"\"\ntype Listing {\n  id: ID!\n\n  \"\"\"The listing's title\"\"\"\n  title: String!\n\n  \"\"\"The listing's description\"\"\"\n  description: String!\n\n  \"\"\"The thumbnail image for the listing\"\"\"\n  photoThumbnail: String!\n\n  \"\"\"The number of beds available\"\"\"\n  numOfBeds: Int!\n\n  \"\"\"The cost per night\"\"\"\n  costPerNight: Float!\n\n  \"\"\"The location type of the listing\"\"\"\n  locationType: LocationType!\n\n  \"\"\"Owner of the listing\"\"\"\n  host: Host!\n\n  \"\"\"The amenities available for this listing\"\"\"\n  amenities: [Amenity]!\n\n  \"\"\"The list of bookings for a listing\"\"\"\n  bookings: [Booking]!\n\n  \"\"\"The number of current and upcoming bookings for a listing\"\"\"\n  numberOfUpcomingBookings: Int!\n\n  \"\"\"\n  An array of upcoming reserved dates that the listing has been booked for\n  \"\"\"\n  currentlyBookedDates: [ReservedDate]!\n\n  \"\"\"The submitted reviews for this listing\"\"\"\n  reviews: [Review]!\n\n  \"\"\"The overall calculated rating for a listing\"\"\"\n  overallRating: Float\n\n  \"\"\"Calculated total cost of the listing with the given arguments\"\"\"\n  totalCost(checkInDate: String!, checkOutDate: String!): Float!\n}\n\n\"\"\"A listing can be one of these types.\"\"\"\nenum LocationType {\n  SPACESHIP\n  HOUSE\n  CAMPSITE\n  APARTMENT\n  ROOM\n}\n\ntype Mutation {\n  \"\"\"Creates a new listing for the currently authenticated host\"\"\"\n  createListing(listing: CreateListingInput!): CreateListingResponse!\n\n  \"\"\"Updates an existing listing\"\"\"\n  updateListing(listingId: ID!, listing: UpdateListingInput!): UpdateListingResponse!\n\n  \"\"\"## Bookings\"\"\"\n  createBooking(createBookingInput: CreateBookingInput): CreateBookingResponse!\n\n  \"\"\"\n  Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking\n  \"\"\"\n  submitHostAndLocationReviews(bookingId: ID!, hostReview: ReviewInput!, locationReview: ReviewInput!): SubmitHostAndLocationReviewsResponse!\n\n  \"\"\"\n  Creates a review for the guest - must be authored by host of past booking\n  \"\"\"\n  submitGuestReview(bookingId: ID!, guestReview: ReviewInput!): SubmitGuestReviewResponse!\n\n  \"\"\"## Wallet\"\"\"\n  addFundsToWallet(amount: Float!): AddFundsToWalletResponse!\n}\n\ninterface MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n}\n\n\"\"\"Minimum details needed for a newly created booking\"\"\"\ntype NewBookingResponse {\n  id: ID!\n  checkInDate: String!\n  checkOutDate: String!\n}\n\ntype Query {\n  example: String\n\n  \"\"\"A curated array of listings to feature on the homepage\"\"\"\n  featuredListings: [Listing!]!\n\n  \"\"\"Search results for listings that fit the criteria provided\"\"\"\n  searchListings(criteria: SearchListingsInput): [Listing]!\n\n  \"\"\"Return the listings that belong to the currently logged-in host\"\"\"\n  hostListings: [Listing]!\n\n  \"\"\"Returns the details about this listing\"\"\"\n  listing(id: ID!): Listing\n\n  \"\"\"Returns all possible amenities for a listing\"\"\"\n  listingAmenities: [Amenity!]!\n\n  \"\"\"\n  All bookings for the given listing, optionally filtered by a BookingStatus\n  \"\"\"\n  bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]!\n\n  \"\"\"A list of bookings for the guest - must be authenticated as guest\"\"\"\n  guestBookings: [Booking]!\n\n  \"\"\"Past bookings for guest based on current date\"\"\"\n  pastGuestBookings: [Booking]!\n\n  \"\"\"Upcoming and current bookings for guest based on current date\"\"\"\n  upcomingGuestBookings: [Booking]!\n\n  \"\"\"Current booking for guest based on current date\"\"\"\n  currentGuestBooking: Booking\n}\n\n\"\"\"\nA booking is reserved for a certain date range, marked by the checkInDate and checkOutDate fields\n\"\"\"\ntype ReservedDate {\n  \"\"\"Date the guest checks in\"\"\"\n  checkInDate: String!\n\n  \"\"\"Date the guest checks out\"\"\"\n  checkOutDate: String!\n}\n\n\"\"\"\nA review consists of a numerical rating and written text. It can be written by a host or a guest.\n\"\"\"\ntype Review {\n  id: ID!\n\n  \"\"\"Written comment the author has written about the review target\"\"\"\n  text: String!\n\n  \"\"\"User that wrote the review\"\"\"\n  author: User!\n\n  \"\"\"\n  The numerical rating for the review target, on a scale of 1-5, with 5 being excellent.\n  \"\"\"\n  rating: Float!\n}\n\n\"\"\"\nReviewInput is the bare minimum needed to submit a review, not tied to any target.\n\"\"\"\ninput ReviewInput {\n  text: String!\n  rating: Float!\n}\n\n\"\"\"To search for a listing, you need these fields.\"\"\"\ninput SearchListingsInput {\n  checkInDate: String!\n  checkOutDate: String!\n  numOfBeds: Int\n\n  \"\"\"The page in the search results, defaults to 1\"\"\"\n  page: Int\n\n  \"\"\"The number of listings you can display in a page, defaults to 5\"\"\"\n  limit: Int\n\n  \"\"\"The results sort order, defaults to cost descending\"\"\"\n  sortBy: SortByCriteria\n}\n\n\"\"\"Listings can be sorted by these options\"\"\"\nenum SortByCriteria {\n  COST_ASC\n  COST_DESC\n}\n\n\"\"\"The response after submitting reviews for a guest.\"\"\"\ntype SubmitGuestReviewResponse implements MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"Newly created review about the guest\"\"\"\n  guestReview: Review\n}\n\n\"\"\"\nThe response after submitting reviews for both host and location together.\n\"\"\"\ntype SubmitHostAndLocationReviewsResponse implements MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"Newly created review about the host\"\"\"\n  hostReview: Review\n\n  \"\"\"Newly created review about the location\"\"\"\n  locationReview: Review\n}\n\n\"\"\"\nUpdates the properties included. If none are given, don't update anything\n\"\"\"\ninput UpdateListingInput {\n  \"\"\"The listing's title\"\"\"\n  title: String\n\n  \"\"\"The listing's description\"\"\"\n  description: String\n\n  \"\"\"The thumbnail image for the listing\"\"\"\n  photoThumbnail: String\n\n  \"\"\"The number of beds available\"\"\"\n  numOfBeds: Int\n\n  \"\"\"The cost per night\"\"\"\n  costPerNight: Float\n\n  \"\"\"The location type of the listing\"\"\"\n  locationType: LocationType\n\n  \"\"\"The Listing's amenities \"\"\"\n  amenities: [ID]\n}\n\n\"\"\"Response after updating a listing\"\"\"\ntype UpdateListingResponse implements MutationResponse {\n  \"\"\"Similar to HTTP status code, represents the status of the mutation\"\"\"\n  code: Int!\n\n  \"\"\"Indicates whether the mutation was successful\"\"\"\n  success: Boolean!\n\n  \"\"\"Human-readable message for the UI\"\"\"\n  message: String!\n\n  \"\"\"The newly updated listing\"\"\"\n  listing: Listing\n}\n\n\"\"\"Represents an Airlock user's common properties\"\"\"\ninterface User {\n  id: ID!\n\n  \"\"\"The user's first and last name\"\"\"\n  name: String!\n\n  \"\"\"The user's profile photo URL\"\"\"\n  profilePicture: String!\n}"
        }
    }
}